Во всех определениях, где это возможно, приведите реальные примеры где и как это может использоваться.


1. Что такое клиент? Приведи пример, что может быть клиентом.
Клиент — та программа, с которой работает пользователь.
Клиент – локальный компьютер на стороне виртуального пользователя, который выполняет отправку запроса к серверу для возможности предоставления данных или выполнения определенной группы системных действий.
Клиент – компьютерное устройство, которое посылает запросы серверу, касающиеся выполнения определенных задач или предоставления конкретной информации.
Т.к. клиент — программа, которую мы используем в интернете. То типичным клиентом, например, является браузер.
Клиенты: это устройства или приложения, которые запрашивают информацию или услуги у сервера. Клиенты могут быть как программными приложениями (например, веб-браузеры, мобильные приложения), так и аппаратными устройствами (например, смартфоны, планшеты, терминалы, так называемые «тонкие клиенты»).
  



2. Что такое сервер? Приведи пример, что может быть сервером сервера.
Сервер — компьютер, на котором хранится само приложение. Весь код, вся логика, все дополнительные материалы и справочники. 
Иногда говорят «сервер приложения» и «сервер БД». Это нормально, ведь фактически сервер — это просто машина, компьютер. А базу и сервер приложения обычно хранят на разных машинах, ради безопасности. В таком случае, если говорят «сервер приложения» — речь о втором звене нашей схемы.
Приложения бывают самые разные. Есть ресурсоемкие, им нужно много памяти и места на диске. Есть «легкие», которые можно развернуть даже на домашнем компьютере.
В клиент-серверной архитектуре сервер — это не только компьютер, на котором находится приложение или сайт. Еще это база, где хранятся все данные приложения.
Сервер – компьютерное устройство, гораздо мощнее обычного ПК.
Серверы: это компьютеры, которые предоставляют запрашиваемую информацию или услуги клиентам. Серверы могут выполнять различные функции, такие как хранение данных, обработка запросов, вычисления и т. д.
Сервер — компьютер, на котором хранится сайт или приложение.
В качестве сервера можно привести следующие примеры: Веб-сервера (/страницы), например Tomcat.
А серверами зачастую выступают:
·         любые серверы http;
·         наборы серверных машин (например, Denwer);
·         локальный веб-сервер.


3. Что такое Interface? Приведи пример.
Интерфейс — это набор инструментов, который позволяет пользователю взаимодействовать с программой. В более широком смысле термин обозначает любые инструменты для соприкосновения между разными системами и сущностями.
Интерфейс (от англ. interface) — это точка соприкосновения, зона взаимодействия между двумя системами. Простыми словами, интерфейс — это посредник, который позволяет двум разным элементам работать друг с другом.
Простой пример — интерфейс между человеком и машиной включает в себя элементы управления автомобилем, такие как руль, педали, рычаг переключения передач, приборную панель.
В настоящее время, выделяют несколько различных типов интерфейсов, но все они выполняют одну и ту же базовую функцию — передачу информации. Например:
Графический интерфейс пользователя (GUI / Graphical User Interface) — это то, что мы видим на экранах компьютеров и мобильных устройств. Он использует элементы, такие как значки, меню и кнопки, для взаимодействия с пользователем.
Интерфейс командной строки (CLI / Command Line Interface) — это текстовый режим взаимодействия, в котором пользователи вводят команды для управления компьютером или программой.
Прикладной программный интерфейс (API / Application Programming Interface) — это набор правил и определений, который позволяет различным программам взаимодействовать друг с другом.
Интерфейс аппаратного обеспечения (HI / Hardware Interface) — это физическая точка соединения между двумя устройствами, например, USB-порт.
Интерфейсы также можно классифицировать по:
Типу взаимодействия на: пользовательские, программные и аппаратные.
Способу передачи данных на: последовательные, параллельные и беспроводные.
Уровню абстракции: низкоуровневые и высокоуровневые.
Независимо от типа они все выполняют одну задачу — обеспечивают взаимодействие между двумя системами.
Свойства хорошего интерфейса:
Простота использования — должен быть интуитивно понятным и простым в использовании, даже для неопытных пользователей.
Удобство использования — должен быть удобным и приятным для пользователя.
Эффективность — должен помогать пользователям быстро и легко выполнять задачи.
Надежность — должен работать надежно и без сбоев.
Гибкость — должен быть достаточно гибким, чтобы адаптироваться к различным потребностям пользователей.


4.  Что такое толстый клиент? Приведи реальный пример, когда клиент считается толстым.
КСА с толстым клиентом. Здесь клиентская сторона обрабатывает большую часть логики приложений, чем в предыдущем типе и выполняет множество операций независимо от сервера. Сервер обрабатывает только специфические запросы от клиента.


5. Что  такое тонкий клиент? Приведи реальный пример, когда клиент считается тонким.
КСА с тонким клиентом, где большая часть логики приложения выполняется на сервере, а клиентская сторона выполняет только представление данных и пользовательский интерфейс. Сервер обрабатывает запросы от клиента и отправляет ему результаты.


6. Какие бывают уровни клиент серверной архитектуры?
Клиент-серверная архитектура- это модель организации вычислительных систем, в которой задачи распределены между клиентами и серверами.
  

  

В общем случае схема клиент - серверной архитектуры включает три уровня представления: уровень представления (презентации) данных пользователем; уровень обработки данных приложением и уровень взаимодействия с базой данных.
Трехуровневая архитектура является наиболее популярной реализацией многоуровневой архитектуры и состоит из одного уровня представления, логического уровня и уровня данных.
  

В системе представлено несколько уровней:
уровень клиента – программное приложение, веб-браузер или устройство, которое отправляет запросы на сервер и получает ответы;
уровень сервера – компьютер, физическая или виртуальная машина, которая обрабатывает запросы и отправляет ответы;
уровень базы данных – система СУБД – принимает запросы для выполнения операций, хранит информацию, обеспечивает ее безопасность, целостность.
Используется также классификация, на основании которой выделяется одно-, двух-, трех- и многоуровневая архитектура в зависимости от компонентов и характера их взаимодействия.
Одноуровневая архитектура (1-Tier)
Для одноуровневой системы характерны следующие отличительные особенности:
клиент и сервер находятся на одном физическом уровне;
программное обеспечение работает непосредственно на клиентском компьютере без промежуточных серверных узлов;
все операции – получение, обработка данных, вывод результатов – выполняются локально на клиентском устройстве.
Такая архитектура проста в реализации, позволяет быстро откликаться на запросы клиентов. Однако способна вызывать проблемы синхронизации, так как данные на разных рабочих машинах часто сохраняются в собственных вариантах.
Двухуровневая архитектура (2-Tier)
Двухуровневая клиент-серверная архитектура предполагает:
обязательно присутствует серверный уровень между клиентским устройством и базой данных;
клиент отправляет запросы на серверный узел, там осуществляется их обработка и доступ к базе данных;
сервер отвечает за бизнес-логику, хранение данных и взаимодействие с БД;
клиентский уровень обеспечивает визуализацию и интерактивность пользовательского интерфейса.
В такой среде обычно легко ориентироваться, работать, получать информацию. Система легко обновляется, масштабируется, обеспечивает высокую производительность.
Трехуровневая архитектура (3-Tier)
Для такого типа архитектуры характерно:
есть три взаимосвязанных уровня – клиентский, серверный, баз данных;
клиентский предоставляет пользовательский интерфейс, взаимодействует с потребителем;
серверный отвечает за обработку бизнес-логики, управляет доступом к данным;
уровень базы данных отвечает за их хранение и управление.
Трехуровневая система гарантирует целостность потока, защищает информацию от проникновения злоумышленников. К недостаткам относится наличие промежуточного программного обеспечения, которое усложняет структуру взаимодействий клиентов с сервером.
Многоуровневая архитектура (N-Tier)
Многоуровневая клиент-серверная архитектура имеет следующие отличительные особенности:
обладает более сложной структурой с несколькими серверными и клиентскими уровнями;
каждый из них отвечает за определенные функции и способен быть физически разделен на разные компоненты;
позволяет более гибко масштабировать систему и распределять нагрузку между серверами.
Коммуникация между уровнями происходит по определенным протоколам и интерфейсам. Это обеспечивает высокую надежность, гибкость системы, возможность использовать в разных комбинациях. Усложнением для работы является ее комплексный характер.


7. Что такое балансировщик нагрузки (балансировщики)?
Балансировка нагрузки или выравнивание нагрузки — метод распределения заданий между несколькими сетевыми устройствами с целью оптимизации использования ресурсов, сокращения времени обслуживания запросов, горизонтального масштабирования кластера, а также обеспечения отказоустойчивости.
Балансировка нагрузки — метод распределения сетевого трафика и задач между сетевыми устройствами.
  

  

  

Балансировщик нагрузки можно использовать для повышения доступности сервисов — он оптимально распределит запросы между серверами и снизит нагрузку. Если один сервер выйдет из строя, балансировщик перенаправит трафик на другой подходящий сервер.
Балансировщики нагрузки бывают двух типов: аппаратные и программные.


8. Горячий резерв серверов? Холодный резерв серверов? Приведи реальный пример.
Нагруженный (горячий) резерв — резервные элементы нагружены так же, как и основные; облегченный (ждущий) резерв — резервные элементы нагружены меньше, чем основные; ненагруженный (холодный) резерв — резервные элементы практически не несут нагрузки.
Холодный резерв - это метод организации резервирования информационных систем, который позволяет минимизировать время простоя в случае отказа основной системы. В отличие от "горячего" резерва, при котором резервная система всегда находится в работоспособном состоянии, холодный резерв активируется только в случае аварии или нештатной ситуации.
Схема горячего резерва — когда у нас есть несколько серверов, работающих в параллель, и балансировщик распределяет нагрузку между ними.
  

Схема холодного резерва — когда у нас второй сервер является резервной копией «на всякий случай». Все запросы идут на первый сервер, второй отдыхает.
  



9. Чем web service отличается от web server? Приведи пример.
С точки зрения "железа", «веб-сервер» — это компьютер, который хранит файлы сайта (HTML-документы, CSS-стили, JavaScript-файлы, картинки и другие) и доставляет их на устройство конечного пользователя (веб-браузер и т. д.). Он подключён к сети Интернет и может быть доступен через доменное имя, подобное mozilla.org.
Веб-сервер — это компьютер, на котором хранится программное обеспечение веб-сервера и файлы компонентов веб-сайта (например, документы HTML, изображения, таблицы стилей CSS и файлы JavaScript). Веб-сервер подключается к Интернету и поддерживает физический обмен данными с другими устройствами, подключенными к Интернету.
Сегодня есть три самых популярных веб-сервера: Apache, NginX и LiteSpeed.
Ведущие веб-серверы включают Apache, Internet Information Services (IIS) от Microsoft и Nginx (произносится как engine X) . Другие веб-серверы включают сервер NetWare от Novell, Google Web Server (GWS) и семейство серверов Domino от IBM.
Веб-служба, веб-сервис (англ. web service) — идентифицируемая уникальным веб-адресом (URL-адресом) программная система со стандартизированными интерфейсами. Веб-службы могут взаимодействовать друг с другом и со сторонними приложениями посредством сообщений, основанных на определённых протоколах (SOAP, XML-RPC и т. д.)
Существует два типа веб-сервисов: веб-сервисы RESTful и веб-сервисы SOAP
Веб-сервисы — это тип интернет-программного обеспечения, которое использует стандартизированные протоколы обмена сообщениями и предоставляется с веб-сервера поставщика услуг приложений для использования клиентом или другими веб-программами. Эти сервисы иногда называют сервисами веб-приложений.
Веб-сервисы бывают двух видов: Simple Object Access Protocol (SOAP) и Representational State Transfer (REST).
Веб-сервис – это мыло или отдых?
Существует несколько моделей проектирования веб-сервисов, но две наиболее распространенные — SOAP и REST . SOAP обеспечивает следующие преимущества по сравнению с REST: независимость от языка, платформы и транспорта (REST требует использования HTTP)
Веб-сервер - это сервер реализующий http протокол. Веб-сервис - это технология для взаимодействия между системами.
Веб-сервис - это набор протоколов и стандартов с открытым исходным кодом, которые используются для обмена данными между различными системами и приложениями. Напротив, интерфейс прикладного программирования (API) - это программный интерфейс, через который два приложения могут взаимодействовать без участия пользователя.
Веб-сервис — это приложение, к которому можно получить доступ через сеть, например, через Интернет. Веб-сервер — это программа, которая доставляет контент через HTTP.


10. Что такое микросервисная архитектура? Приведи реальный пример использования.
Архитектуры микросервисов — это распределенные приложения с небольшими независимыми блоками функций. Разработчики могут обновлять, улучшать и отлаживать эти модули, не отключая все приложение. Это упрощает масштабирование и повышает скорость разработки.
Микросервисная архитектура — стиль разработки ПО, заключающийся в разбиении монолита системы на отдельные компоненты, которые представляют собой независимые сервисы.
Примеры использования микросервисной архитектуры
Amazon
Одна из первых компаний, начавших применять микросервисы. Вся инфраструктура Amazon построена из сотен независимых сервисов — для каталога товаров, пользовательских аккаунтов, поиска, рекомендаций и так далее. Это позволяет Amazon легко масштабировать ресурсы под возрастающие нагрузки и быстро выводить новые продукты за счет микросервисной разработки.
Netflix
Стриминговый сервис Netflix разбит более чем на 800 микросервисов. Они отвечают за видео-транскодирование, рекомендации, A/B тестирование интерфейсов и прочие задачи. Гибкость микросервисов позволяет Netflix быстро расширять парк серверов при наплывах трафика и экспериментировать с UI/UX без риска для системы.
Uber
Компания использует сотни микросервисов — для геолокации, картографии, обработки платежей, логистики и многого другого. Это обеспечивает надёжность и отказоустойчивость системы при огромных нагрузках, а также позволяет Uber быстро масштабироваться и выходить на новые рынки.


11. Прокси сервер? Приведи пример.
Слово proxy переводится с английского как «посредник, представитель». Оно хорошо отражает суть: прокси-сервер перехватывает трафик и «посредничает» между пользователем и сайтом. При этом данные пользователя оказываются скрыты от сайта. Прокси-сервер можно сравнить с почтовым отделением.
Бывают трех типов:
Прокси-сервер центра обработки данных. Прокси-сервер центра обработки данных не связан с интернет-провайдером (ISP).
Резидентный прокси-сервер. Резидентный прокси-сервер связан с интернет-провайдером.
Мобильный прокси-сервер.
Что важно запомнить
Прокси-сервер — технология, которая похожа на VPN, но чаще всего прокси-серверы не шифруют данные пользователя или используют шифрование частично.
Прокси-сервер нужен, чтобы обходить блокировку на зарубежных сайтах, запрещать доступ к сайтам на рабочем месте сотрудников, скрывать данные о пользователях или ускорять доступ к сайтам.
Прокси-серверы различаются по типам протоколов, степени анонимности, месту размещения и доступности.
При подключении через прокси-сервер важные данные пользователей могут попасть к злоумышленникам или владельцу сервера.
Выбор прокси-сервера для бизнеса лучше поручить профессионалу.
Прокси-сервер — технология, которая похожа на VPN, но чаще всего прокси-серверы не шифруют данные пользователя или используют шифрование частично.Прокси-сервер нужен, чтобы обходить блокировку на зарубежных сайтах, запрещать доступ к сайтам на рабочем месте сотрудников, скрывать данные о пользователях или ускорять доступ к сайтам.Прокси-серверы различаются по типам протоколов, степени анонимности, месту размещения и доступности.При подключении через прокси-сервер важные данные пользователей могут попасть к злоумышленникам или владельцу сервера.Выбор прокси-сервера для бизнеса лучше поручить профессионалу.
Адреса прокси-сервера могут быть числовыми, буквенно-цифровыми или даже комбинацией того и другого . Например, «192.168.1.1:8080» — это распространенный формат адреса прокси-сервера, где «192.168.1.1» — это IP-адрес прокси-сервера, а «8080» — его номер порта.
Используйте следующий синтаксис для настроек прокси-сервера: http://<address>:<port> , где <address> — веб-адрес прокси-сервера, а <port> — номер порта, назначенный прокси-серверу.
Прокси-сервер — это компьютер, который выступает в качестве посредника между пользователем и веб-сайтом, к которому он хочет подключиться. Если вы используете прокси-сервер, все посещаемые вами веб-сайты видят его IP-адрес вместо вашего реального. Например, если вы купили немецкий прокси, вы будете считаться пользователем из Германии в сети.
Выберите «Настройки». Нажмите «Система» в меню слева. В разделе «Настройки сети» нажмите «Открыть настройки прокси-сервера вашего компьютера». В открывшихся настройках Windows вы найдете адрес прокси-сервера, если он настроен.
Чем отличается прокси от айпи?
При прямом сетевом подключении и клиент, и сервер знают IP-адреса друг друга. Однако прокси-сервер представляет собой еще один слой между клиентом и сервером. Можно использовать прокси-сервер перед клиентом (прямой прокси-сервер) или сервером приложений (обратный прокси-сервер).
Прокси бывают прозрачные, анонимные, обратные, открытые, приватные, выделенные, общие и т.д.
Платные сервисы - только они способны гарантировать высокую степень безопасности подключений:
Лучшие прокси сервисы — ТОП 10
Froxy – лучшие платные прокси со встроенным парсером
Asocks – выбор редакции uGuide
Ake.net – свежие прокси с ротацией
Mango Proxy – огромный пул резидентных прокси с ротацией
Proxy6.net — надежные серверные прокси
ProxyWhite — прокси в России, Германии, США
Fineproxy.org — бесплатные серверные прокси
PROXYS.IO — IPv4/IPv6 прокси для телефона
SOCPROXY — лучшие мобильные прокси в РФ
Smartproxy — доступные резидентские прокси


12.  VPN? Приведи пример.
VPN, или виртуальная частная сеть, создает частное сетевое подключение между устройствами с помощью Интернета. Сети VPN используются для безопасной и анонимной передачи данных по публичным сетям.
Как VPN меняет IP?
IP-адреса? Когда вы используете VPN для подключения к Интернету, VPN-сервис создает зашифрованное подключение (туннель) между вашим устройством и всемирной паутиной. Когда ваш трафик проходит через туннель, VPN-сервер меняет ваш IP-адрес на свой собственный, которым также пользуются тысячи других клиентов сервиса.
VPN, что означает виртуальная частная сеть, устанавливает цифровое соединение между вашим компьютером и удаленным сервером, принадлежащим поставщику VPN, создавая двухточечный туннель, который шифрует ваши личные данные, маскирует ваш IP-адрес и позволяет обходить блокировки веб-сайтов и брандмауэры в Интернете.
Подборка проверенных сервисов, которые позволят зашифровать трафик и скрыть свое местоположение в интернете.
TunnelBear. Один из лучших VPN-сервисов, который уже успели полюбить пользователи из разных уголков мира.
Opera VPN.
Windscribe.
Hotspot Shield.
Speedify.
Private Tunnel.
VPN могут сделать Интернет, который является общедоступной сетью, уязвимой для нарушений безопасности, частным, делая данные, проходящие через него, непонятными для любого, кто их перехватывает. Распространенные примеры VPN включают Cisco AnyConnect и NordVPN.


13. Что такое атака MAN in the Midl?
Атака «человек посередине» (Man-in-the-Middle) — это форма кибератаки, при которой для перехвата данных используются методы, позволяющие внедриться в существующее подключение или процесс связи. Злоумышленник может быть пассивным слушателем в вашем разговоре, незаметно крадущим какие-то сведения, или активным участником, изменяя содержание ваших сообщений или выдавая себя за человека или систему, с которыми вы, по вашему мнению, разговариваете.
Вспомните 20-й век, когда у многих были стационарные телефоны с несколькими трубками, и один член семьи мог взять трубку во время разговора другого. Вы могли даже не подозревать, что вас слушает кто-то еще, пока он не начнет вклиниваться в разговор. В этом и заключается принцип атаки «человек посередине».
Как работает атака «человек посередине»:
  

Вот практический пример реальной атаки «человек посередине» на Microsoft Office 365, когда злоумышленник обошел многофакторную аутентификацию:
* Пользователь нажимает на фишинговую ссылку, которая переводит его на поддельную страницу входа в Microsoft, где он вводит свои имя пользователя и пароль.
* Поддельная веб-страница перенаправляет имя пользователя и пароль на сервер злоумышленника.
* Злоумышленник пересылает запрос на вход в Microsoft, так что эти действия не вызывают подозрений.
* Microsoft отправляет пользователю код двухфакторной аутентификации в текстовом сообщении на телефон.
* Пользователь вводит код на поддельной веб-странице.
* Поддельная веб-страница перенаправляет имя пользователя и пароль на сервер злоумышленника.
* Злоумышленник использует Evilginx для кражи cookie-файла сеанса.
* Злоумышленник пересылает полученный от пользователя код двухфакторной аутентификации в Microsoft, и теперь с помощью cookie-файла сеанса может войти в Office 365 от имени этого пользователя. Таким образом хакер получает доступ к конфиденциальным данным предприятия.


14. Что такое API?
API расшифровывается как Application Programming Interface — интерфейс, который позволяет приложениям взаимодействовать. API позволяет разработчикам программного обеспечения отправлять информацию непосредственно из одного приложения в другое, минуя пользовательский интерфейс.
API – это механизмы, которые позволяют двум программным компонентам взаимодействовать друг с другом, используя набор определений и протоколов. Например, система ПО метеослужбы содержит ежедневные данные о погоде.
Какой ежедневный пример API?
Погодные приложения собирают данные о погоде в режиме реального времени через API, предоставляемые погодными службами. Когда вы проверяете погоду через смарт-устройство или поисковую систему, приложение отправляет запрос API в погодную службу, которая отвечает текущими погодными условиями и прогнозами.
API, или интерфейсы прикладного программирования, действуют как язык, который позволяет различным программным приложениям общаться друг с другом . Представьте, что вы заказываете кофе в кафе; API — это как официант, который относит ваш заказ бариста, а затем приносит вам кофе.


15. Что такое REST API?
REST API (Representational State Transfer) – это архитектурный стиль взаимодействия компонентов распределенной системы, который используют для передачи данных между сервером и клиентом. Он работает с ресурсами через стандартные операции (GET, POST, PUT, DELETE) и использует HTTP протокол.


16. Требования к архитектуре Rest.
Всего в REST есть шесть требований к проектированию API. Пять из них обязательные, одно — опциональное:
Клиент-серверная модель (client-server model).
Отсутствие состояния (statelessness).
Кэширование (cacheability).
Единообразие интерфейса (uniform interface).
Многоуровневая система (layered system).
Код по требованию (code on demand) — необязательно.


17.  Что такое CRUD?
Чтобы система считалась RESTful, она должна “вписываться” в шесть REST ограничений (соответствует 5 требованиям, одному необязательно). Если сервис соблюдает только часть из них, то про такой протокол говорят, что он REST-like. На практике, есть ситуации, в которых невозможно следовать REST требованиям, поэтому большинство протоколов являются REST-like, даже если они утверждают другое.
Требования: 
1. Приведение архитектуры к модели клиент-сервер
В основе данного ограничения лежит разграничение потребностей. Необходимо отделять потребности клиентского интерфейса от потребностей сервера, хранящего данные. Данное ограничение повышает переносимость клиентского кода на другие платформы, а упрощение серверной части улучшает масштабируемость системы. Само разграничение на “клиент” и “сервер” позволяет им развиваться независимо друг от друга. 
2. Отсутствие состояния
Архитектура REST требует соблюдения следующего условия. В период между запросами серверу не нужно хранить информацию о состоянии клиента и наоборот. Все запросы от клиента должны быть составлены так, чтобы сервер получил всю необходимую информацию для выполнения запроса. Таким образом и сервер, и клиент могут "понимать" любое принятое сообщение, не опираясь при этом на предыдущие сообщения. 
3. Кэширование
Клиенты могут выполнять кэширование ответов сервера. У тех, в свою очередь, должно быть явное или неявное обозначение как кэшируемых или не кэшируемых, чтобы клиенты в ответ на последующие запросы не получали устаревшие или неверные данные.
Правильное использование кэширования помогает полностью или частично устранить некоторые клиент-серверные взаимодействия, еще больше повышая производительность и расширяемость системы.
4. Единообразие интерфейса
К фундаментальным требованиям REST архитектуры относится и унифицированный, единообразный интерфейс. Клиент должен всегда понимать, в каком формате и на какие адреса ему нужно слать запрос, а сервер, в свою очередь, также должен понимать, в каком формате ему следует отвечать на запросы клиента. Этот единый формат клиент-серверного взаимодействия, который описывает, что, куда, в каком виде и как отсылать и является унифицированным интерфейсом
5. Слои
Под слоями подразумевается иерархическая структура сетей. Иногда клиент может общаться напрямую с сервером, а иногда — просто с промежуточным узлом. Применение промежуточных серверов способно повысить масштабируемость за счет балансировки нагрузки и распределенного кэширования.
Приведем пример. 
Представим себе некоторое мобильное приложение, которое пользуется популярностью во всем мире. Его неотъемлемая часть — загрузка картинок. Так как пользователей — миллионы человек, один сервер не смог бы выдержать такой большой нагрузки. 
Разграничение системы на слои решит эту проблему. Клиент запросит картинку у промежуточного узла, промежуточный узел запросит картинку у сервера, который наименее загружен в данный момент, и вернет картинку клиенту. Если здесь на каждом уровне иерархии правильно применить кэширование, то можно добиться хорошей масштабируемости системы. 
6. Код по требованию (необязательное ограничение)
Данное ограничение подразумевает, что клиент может расширять свою функциональность, за счет загрузки кода с сервера в виде апплетов или сценариев. 
Преимущества, которые дает REST
У приложений, которые соблюдают все вышеперечисленные ограничения, есть такие преимущества: 
* надёжность (не нужно сохранять информацию о состоянии клиента, которая может быть утеряна);
* производительность (за счёт использования кэша);
* масштабируемость;
* прозрачность системы взаимодействия;
* простота интерфейсов;
* портативность компонентов;
* легкость внесения изменений;
* способность эволюционировать, приспосабливаясь к новым требованиям.


18. Чем GET отличается от POST?
Существуют пять основных методов:
GET: используется для запроса данных из сервера.
POST: позволяет отправить данные на сервер для создания новых ресурсов. ...
PUT: используется для обновления существующего ресурса на сервере. ...
DELETE: удаляет ресурс на сервере. ...
PATCH: частично изменяет существующий ресурс
GET-запрос — это запрос протокола HTTP к веб-серверу для получения нужной веб-клиенту информации. GET-запрос предоставляет возможность передачи параметров — на этом основан популярный сегодня механизм веб-сервисов.
Метод запроса POST предназначен для направления запроса, при котором веб-сервер принимает данные, заключённые в тело сообщения, для хранения. Он часто используется для загрузки файла или представления заполненной веб-формы. В отличие от него, метод HTTP GET предназначен для получения информации от сервера.


19. Чем POST отличается от PUT?
PUT - идемпотентный (браузеры и прокси считают, что такой запрос повторять безопасно)
POST - неидемпотентный (наоборот)
Остальное уже зависит от реализации.
Часто встречается такое поведение:
PUT - изменение всех полей объекта или создание объекта с заранее известным id
POST - создание нового объекта (при неизвестном id) или вызов какой-то процедуры
Ключевые различия между PUT и POST:
Метод PUT вызывается, когда вам нужно изменить один ресурс, а метод POST вызывается, когда вам нужно добавить дочерний ресурс.
Ответы метода POST можно кэшировать, но нельзя кэшировать ответы метода PUT.
Вы можете использовать запрос UPDATE в PUT, тогда как вы можете использовать запрос создания в POST.
В методе PUT клиент решает, какой ресурс URI должен иметь, а в методе POST сервер решает, какой ресурс URI должен иметь.
PUT работает как конкретный, а POST — как абстрактный.
Если вы отправите один и тот же запрос PUT несколько раз, результат останется тем же, но если вы отправите один и тот же запрос POST несколько раз, вы получите разные результаты.
Метод PUT идемпотентен, тогда как метод POST не идемпотентен.


20. Чем PUT отличается от PATCH?
Метод PUT используется для обновления существующих ресурсов или создания новых, если они не существуют. Этот метод также идемпотентный: это означает, что повторные запросы дают один и тот же результат, даже если они выполняются несколько раз.
Метод запроса HTTP PATCH частично изменяет ресурс. В какой-то степени PATCH можно назвать аналогом действия «обновить» из CRUD (однако не следует путать HTTP и CRUD — это две разные вещи). Запрос PATCH является набором инструкций о том, как изменить ресурс. В отличие от PUT , который полностью заменяет ресурс.


21. Можно ли в POST передать данные и через URL и через Body?
В методе POST параметры передаются не в URL, а в теле запроса. Оно указывается в вызове send(body). 
Данные POST запроса передаются в теле. То есть стартовая строка, потом заголовки, пустая строчка, а дальше идут параметры POST. Часто в формате url-encoded (formdata) - это как в адресной сроке у GET запроса, но в последнее время есть тенденция передавать в теле json.
Помимо того, что данные на сервер можно передавать через body, которое используется при POST запросах и отправке форм, мы также можем передать так называемую строку запроса query string. Это параметры ключ=значение, которые располагаются в request line после указания глагола POST или GET.
POST передает данные как в URL, так и внутри тела запроса. С помощью ссылки на HTML-странице POST запрос не выполнить.
Данные добавляются к URL в виде серии пар имя/значение. После того, как веб-адрес URL заканчивается, мы включаем вопросительный знак ( ? ), за которым следуют пары имя/значение, каждая из которых разделена амперсандом ( & ).
Да, запросы POST, безусловно, могут иметь параметры запроса ! Просто создавайте URL соответствующим образом, когда вам нужно передать дополнительные параметры или фильтры в конечные точки API.
Запросы GET и POST — это два основных метода HTTP-протокола, которые используются для отправки запросов на сервер. Обычно при GET-запросе параметры передаются в URL-адресе, а при POST-запросе - в теле запроса.


22. Можно ли с помощью URLa передать данные на сервер?
Метод запроса GET является открытым методом передачи данных, т.к. они добавляются непосредственно в URL-адрес после знака вопроса ? и видны в адресной строке браузера всем пользователям.


GET. С помощью него клиент запрашивает у сервера содержимое ресурса. Например, HTML-страницу. Кроме того, с помощью этого метода на сервер можно передать данные клиента. Для этого в адресе ресурса после символа ? необходимо добавить параметры и их значения, которые нужно передать на сервер. Данные, передаваемые в HTTP-запросе, выглядят следующим образом:
GET /blog/examplepage?variable1=somevalue1&variable2=somevalue2 HTTP/1.1
Здесь variable1 и variable2 — это параметры, которые передаст клиент, а somevalue1 и somevalue2 — их значения. Важное свойство метода — идемпотентность: если выполнить HTTP-запрос несколько раз с одинаковым содержанием, то результат тоже будет одинаковым.


~ С помощью GET-запроса


23. Что такое идемпотентность?
Идемпоте́нтность — свойство объекта или операции при повторном применении операции к объекту давать тот же результат, что и при первом.
Идемпотентность запроса — это обеспечение возможности многократного вызова запроса с гарантией того, что состояние системы изменится только один раз.
В условиях нестабильного мира, в котором клиенты и серверы подвержены временным сбоям и разрывам соединения в процессе обмена запросами, идемпотентность становится незаменимым инструментом для повышения устойчивости системы.
Идемпотентность — когда ты повторяешь действие 🔄, а результат не меняется после первого раза. Как если бы ты нажал на кнопку лифта один раз или десять, лифт уже вызван. В программировании это помогает избежать неожиданностей, делая системы более надежными.


24.  В чем разница между безопасностью и идемпотентностью?
Идемпотентность означает, что отправка одного и того же запроса несколько раз приведет к одному и тому же результату, не изменяя состояние сервера или ресурса. Безопасность означает, что отправка запроса вообще не изменит состояние сервера или ресурса, а только извлечет информацию.
Идемпотентность — это свойство операций или запросов API, которое гарантирует, что многократное повторение операции даст тот же результат, что и ее однократное выполнение. Безопасные методы идемпотентны, но не все идемпотентные методы безопасны.
Метод OPTIONS безопасен, идемпотентен и не кэшируется.
Идемпотентные методы - это методы, которые либо не изменяют состояние в базе данных, либо изменяют состояние только при первом запросе. В случае повторной отправки идентичного запроса, состояние в базе данных не изменяется.
Идемпотентными методами являются: GET, PUT, DELETE, HEAD и OPTIONS. POST и PATCH не входят в эту группу.
Безопасные методы - это методы, которые не изменяют состояние в базе данных (read only методы). Примечательно, что все безопасные методы также являются идемпотентными.
Безопасными методами являются: GET, HEAD и OPTIONS.
Отличие идемпотентных методов от безопасных заключается в том, что безопасные методы не меняют состояние базы данных, в то время как идемпотентные методы могут внести изменения при первом запросе, но последующие идентичные запросы уже не будут менять состояние в базе данных.


25.  Что такое End point?
Endpoint — это конечная точка веб-сервиса, к которой клиентское приложение обращается для выполнения определенных операций или получения данных. Эндпоинты обычно представляют собой URL-адреса, к которым отправляются HTTP-запросы.
Эндпоинты используются во многих сферах разработки ПО, включая веб-разработку, разработку мобильных приложений и облачные сервисы. Они позволяют клиентам взаимодействовать с сервером или сервисом, передавая данные и получая ответы.
Возьмём для примера веб-приложение, которое отображает список фотографий пользователей. Для того, чтобы получить этот список, веб-приложение должно обращаться к серверу, который хранит эти данные. В этом случае, можно использовать эндпоинт апи для получения списка фото.
Ниже мы рассмотрим ещё несколько определений, которые важны для понимания темы этой статьи.
API (Application Programming Interface) используется для определения способов взаимодействия между различными программами или компонентами ПО. API определяет набор правил и протоколов, по которым приложения могут обмениваться данными и командами.
  

API endpoint — это конечная точка в API, к которой можно обратиться для выполнения нужного действия или получения данных. Endpoint представляет собой URL, по которому отправляются запросы для взаимодействия с API.
Эндпоинт пример: предположим, компания разрабатывает приложение для просмотра погоды, которое использует API сервиса для получения актуальной информации. В этом случае можно использовать API эндпоинт для отправки запроса на получение данных о погоде.
Таким образом API и endpoint позволяют приложениям взаимодействовать друг с другом, обмениваться данными и выполнять различные операции.
Методы эндпоинта
Методы эндпоинта определяют, какие действия можно выполнить с помощью конкретного API эндпоинта. Существуют пять основных методов:
GET: используется для запроса данных из сервера.
POST: позволяет отправить данные на сервер для создания новых ресурсов. Это может быть отправка данных формы для создания нового пользователя.
PUT: используется для обновления существующего ресурса на сервере. Например, обновление информации о пользователе.
DELETE: удаляет ресурс на сервере. Это может быть удаление пользователя из базы данных.
PATCH: частично изменяет существующий ресурс.
Ниже приведем пример того, как эндпоинт может выглядеть в коде API Инстаграма:
  

Конечная точка обычно визуально выделяется, чтобы её можно было быстро найти, ведь часть документации строится вокруг неё.


26.  Что такое статус код сервера?
Код состояния HTTP (англ. HTTP status code) — часть первой строки ответа сервера при запросах по протоколу HTTP. Клиент узнаёт по коду ответа о результатах своего запроса и определяет, какие действия ему предпринимать дальше. Бесплатная проверка кодов ответа сервера.
Код состояния HTTP (англ. HTTP status code) — это трёхзначное число, с которого начинается любой ответ сервера на запрос по протоколу HTTP. Код кратко сообщает суть ответа — был ли выполнен запрос или возникла ошибка.
В зависимости от кода ответа посетитель либо будет видеть содержимое страницы или результаты какого-то действия, либо не будет. Например код ответа 200 будет значить, что всё хорошо и сервер отправит контент, а код 403 будет значить, что доступ к контенту запрещён и сервер ничего не отправит.
Определённые коды могут указывать на проблемы в работе сервера и влиять на SEO-продвижение сайта.
Как посмотреть коды ответа сервера в браузере
Это может понадобиться, если нужно убедиться в правильности настроек редиректа или диагностировать ошибки при загрузке отдельных элементов на странице, когда основной контент загружается, но какой-то функционал недоступен.
Для этого нужно открыть в браузере инструменты разработчика на странице, где возникает ошибка, перейти на вкладку «Сеть» и обновить страницу. После этого вы увидите все HTTP запросы и коды ответа сервера.
Чтобы открыть инструменты в популярных браузерах, нажмите комбинацию клавиш:
Ctrl + Shift + I — на компьютере с Windows или Linux;
⌘ + ⌥ + I — на компьютере с macOS.


27.  Какие существуют группы?
Ответы сгруппированы в 5 классов:
Информационные ответы ( 100 – 199 )
Успешные ответы ( 200 – 299 )
Сообщения о перенаправлении ( 300 – 399 )
Ошибки клиента ( 400 – 499 )
Ошибки сервера ( 500 – 599 )
Какие бывают коды состояния HTTP
Коды ответов HTTP делятся на пять классов. В каждом из них объединены сообщения с похожими значениями. Вот краткие описания каждого из классов:
1хх — информационные коды. Сообщают о прогрессе выполнения запроса. На практике практически не встречаются.
2хх — коды успешно выполненных запросов. Сообщают о том, что всё в порядке и работает, как ожидалось.
3хх — коды перенаправлений. Сообщают о том, что запрашиваемая страница переехала и нужно сделать ещё один запрос по новому URL.
4хх — коды ошибок клиента. Сообщают об ошибке на стороне пользователя, который отправил запрос.
5хх — коды ошибок сервера. Сообщают об ошибке на стороне сервера, который обрабатывал запрос.
В каждом классе есть разное количество HTTP кодов и все они предназначены для своей ситуации. Мы рассмотрим все официальные коды сервера и их значения в отдельном разделе чуть ниже.


28.  Какие ты знаешь 5 из 400?
Что значит ошибка 400
Все ошибки, которые начинаются на 4, говорят о том, что проблема на стороне пользователя. Ошибка 400 bad request переводится как «плохой запрос». Она возникает тогда, когда браузер пользователя отправляет некорректный запрос серверу, на котором находится сайт.
«400 Bad Request» («ошибка неверного запроса»)
Почти всегда это происходит из-за опечатки во вводе пользователя. Но это не значит, что вы сошли с крючка! Убедитесь, что в сообщении об ошибке указаны некоторые подробности ошибочного ввода, чтобы пользователь мог быстро его исправить.
Данные ошибки возвращаются в случае, если запрос получен, не может быть обработан сервером. Причины могут быть очень разными и не всегда могут быть правильно интерпретированы со стороны клиента.
Что делать:
повторить запрос, который не был выполнен с первого раза (например, повторно отправить форму в браузере);
поменять клиентское приложение, если это возможно (например, выполнить действия в другом браузере);
повторить свой запрос позже;
если ничего не помогает, нужно обратиться в службу поддержки того ресурса, при работе с которым возникают проблемы.
«401 Unauthorized» (ошибка «не авторизован»)
Этот статус означает, что ввод в порядке, но в запросе пользователя отсутствует код авторизации. 
Причины:
для доступа к странице сайта требуется авторизация на нем самом.
Что делать:
ввести правильные имя пользователя и пароль, если их запрашивает сайт через специальное окно в браузере.
Не путать с…
«403 Forbidden» (ошибка «запрещено»)
Это означает, что код авторизации признан действительным, но у пользователя нет разрешения. Например, пользователь может пытаться получить доступ к чему-то, доступному только администраторам, что повышает безопасность удаленного персонала.
Причины:
авторизация успешна, но для данного пользователя доступ запрещен.
Что делать:
в случае получения кода ответа 403 нужно использовать другие имя пользователя  и пароль, если они известны, либо же ничего не делать, если 403-й код получен в ответ на попытку просмотреть список содержимого каталога на веб-сервере, отображение которого запрещено серверными настройкам.
«404 Not Found» (ошибка «не найдено»)
Запрос пользователя действителен, но конечная точка или ресурс, который он запрашивает, не существует. Возможно, это связано с тем, что файл уже был удален, но убедитесь, что это не вызвано ошибкой HTTP/HTTPS.
Причины:
страница сайта была удалена или перемещена;
заголовок страницы был изменен, и система управления сайтом автоматически изменила ее URI (универсальный идентификатор ресурса);
запрошенный ресурс действительно отсутствует, т.к. его адрес был введен пользователем вручную неверно;
нарушена целостность сайта в результате проблем с программным или аппаратным обеспечением, например, стерт или недоступен индексный файл, картинка, видеоролик и т.д.
Что делать:
обязательно создать пользовательскую страницу для данного типа ошибки и дать в ней ссылку на главную страницу сайта и/или поисковую форму;
при переименовании страниц и изменении их URI создать 301-ый редирект на новый адрес;
периодически проверять сайт на наличие так называемых «битых» ссылок и исправлять их;
периодически создавать резервные копии файлов сайта, чтобы при обнаружении «битой» ссылки на существовавший ранее файл можно было его восстановить.
Также есть понятие «программной» 404-ой ошибки (soft 404 error), которая возникает в случае, если программист по незнанию при отсутствии некоторого ресурса возвращает код успеха 200 и сообщение о том, что такая страница не найдена. Ситуация крайне неприятная, т.к. поисковые системы могут расценить это как большое количество задвоенных страниц, а найти «программные» ошибки с помощью ПО для обнаружения «битых» ссылок без дополнительных действий нельзя.u Здесь совет один: если ресурс не найден, должен возвращаться именно код 404.
«429 Too Many Requests» (ошибка «слишком много запросов»)
Это происходит, когда один и тот же пользователь пытается вызвать API слишком много раз подряд. После ряда громких DDoS-атак за последнее десятилетие веб-сервисы внимательно следят за тем, кто и как часто обращается к их серверу.
Это ограничение скорости аналогично тому, что можно найти в любом домене или на других крупных сайтах. Поставщики веб-хостинга, такие как Cloudflare, обеспечивают защиту от DDoS для доменов, размещенных на их серверах. Для API эти средства защиты должны быть встроены.


«422 Unprocessable Entity» (ошибка «неподдерживаемый контент»)
Ошибка 422 - это код HTTP-ошибки, который может возникнуть при обращении к веб-странице. Этот код ошибки обозначает "Неподдерживаемый контент" и означает, что сервер не смог обработать запрос, так как в запросе содержится неправильный или недопустимый контент.
Ошибку 422 можно решить несколькими способами:
Проверьте правильность ввода данных
Проверьте код на наличие ошибок
Измените формат данных
Измените кодировку данных
Свяжитесь с технической поддержкой


29.  Какие ты знаешь 5 из 500?
5xx Server Error — коды ошибок сервера
HTTP 500 Internal Server Error — «Внутренняя ошибка сервера». Сервер столкнулся с непредвиденной ошибкой во время обработки запроса.
«500 Internal Server Error» («внутренняя ошибка сервера»)
Код оповещает о возникшей внутренней ошибке сервера или его аварийном отказе.
Причины:
ошибки в программном коде сайта;
проблемы с настройкой веб-сервера.
Что делать:
не менять без крайней необходимости и соответствующих знаний код системы управления сайтом и настройки веб-сервера;
тестировать код сайта перед публикацией в Сети, тестировать функциональность сайта после публикации.
«502 Bad Gateway» («ошибка шлюза»)
Сообщает о неправильном получении ответа вышестоящего сервера. Частая причина — несогласованные протоколов между шлюзом и сервером (ошибки DNS, прокси, хостинга).
Причины:
проблемы с сетью на участке между клиентом и сервером;
проблемы в работе одного из связанных с работой сайта серверов.
Что делать:
проверить, что у Вас точно работает Интернет или локальная сеть, если целевой сайт находится во внутренней сети организации (Интранет);
проверить работоспособность сайта, подключившись к другому провайдеру или через другой прокси-сервер;
веб-мастеру следует проверить, что все сервера, на которых работает сайт, нормально работают.
«503 Service Unavailable» (ошибка «сервис недоступен»)
В общем, ошибки 400 говорят нам, что что-то не так с запросом — синтаксис, например. А ошибки 500 — это, как правило, общие ошибки, которые сервер обычно возвращает, когда никакой другой код ошибки не подходит.
Причины:
проблемы с серверным программным обеспечение: веб-сервер, базы данных, кэширующие прокси-сервера, акселераторы выполнения кода;
сервер действительно отсутствует в Сети из-за проблем с его аппаратурой, питанием, сетью, в которой он находится.
Что делать:
следить за состоянием сервера и сайта с помощью соответствующего ПО и своевременно исправлять нештатные ситуации.
511 «ошибка авторизации»
Причины:
для доступа к странице сайта требуется авторизация в прокси-сервер
Что делать:
при настройке соединения через прокси-сервер указать действующие имя пользователя и пароль
522 «ошибка, связанная со временем ожидания ответа»
Причины:
соединение клиента с сервером вообще не было установлено. Также есть смысл повторить свой запрос через некоторое время, больше от него ничего не зависит. Веб-мастеру нужно проверить связь между серверами, которые принимают участие в работе его сайта, и их работоспособность в принципе.
В чем разница между кодами статуса HTTP 4xx и 5xx?
Коды 4xx предназначены для случаев, когда клиент, по-видимому, допустил ошибку, а коды 5xx — для случаев, когда сервер знает, что сервер допустил ошибку. Различить эти случаи в общем случае невозможно, поэтому разница носит лишь информационный характер.


30.  Какие ты знаешь Headers в Request?
Заголовки HTTP-запросов можно разделить на основные (General Headers), заголовки запроса (Request Headers) и сущности (Entity Headers). Основные и заголовки сущности применяются и к запросам клиента, и к ответам сервера, а заголовки запроса, как следует из названия, — только к запросам. Заголовки сущности необязательны и могут передаваться в том случае, если у запроса есть какое-либо тело (body), например при использовании метода POST.
Все заголовки разделяются на четыре основных группы:
General Headers (рус. Общие заголовки) — используются в запросах и ответах.
Request Headers (рус. Заголовки запроса) — используются только в запросах.
Response Headers (рус. Заголовки ответа) — используются только в ответах.
Entity Headers (рус. Заголовки сущности) — сопровождают каждую сущность сообщения. Используются в запросах и ответах.
Заголовки запроса
Accept. Используется для определения определённых типов медиа файлов, которые применимы для ответа.
Accept-Charset Указывает, какой набор символов приемлем для ответа.
Accept-Encoding Указывает приемлемую для ответа кодировку контента
Accept-Language Указывает набор приемлемых языков для ответа.
Authorization Содержит данные аутентификации пользователя для запрашиваемого ресурса. Содержит имя_пользователя:пароль, закодированные базовой 64-битной кодировкой
Cookie Содержит пару “имя-значение” информации, хранящейся по данной URL.
Expect Указывает, что данный набор поведений сервера требуется клиентом.
From Данное поле содержит email пользователя, который контролирует запросы пользователя
Host Определяет хост и порт запрашиваемого ресурса.
If-Match Данное поле используется для того, чтобы сделать метод условным. Если мы хотим, чтобы метод выполнялся, только при соблюдении определенного условия.
If-Modified-Since Используется для создания условий. Если запрашиваемая URL не была изменена с указанного времени, сущность будет возвращена сервером вместо ответа 304 (Not modified) без сообщения в теле.
If-None_Match Используется для того, чтобы сделать метод условным. Выполняется только в том случае, если одно из переданных значений совпадает с тэгом, представленным ETag.
If-Range Данное поле может быть использовано с условным GET для запроса определенной части данных.
Max-Forwards Этот заголовок обеспечивает механизм с методами TRACE и OPTIONS для ограничения количества прокси или соединений, которые могут передавать запрос следующему серверу.
Proxy-Authorization Данный заголовок позволяет клиенту определять себя (или своего пользователя) для прокси, который требует аутентификации.
Range Поле заголовка Range определяет диапазон запрашиваемого из документа контента в байтах.
Referer Данное поле заголовка позволяет клиенту определять URI ресурса с которого пришел запрос на URL.
TE Поле заголовка TE указывает расширение кодировка передачи, которая должна быть принята запросом или не должна.
User-Agent Данное поле заголовка содержит информацию об агенте пользователя, посылающего запрос.


31.  Какие ты знаешь Headers в Responce?
Заголовки ответа
Accept-Ranges Позволяет серверу указывать принятие им диапазона запросов.
Age Передает ожидания относительно времени (в секундах), прошедшего с момента ответа, который был сгенерирован сервисом.
ETag Поле заголовка ETag обеспечивает текущее значение тэга сущности для варианта, на который был сделан запрос.
Location Используется для перенаправления реципиента на URL, отличную от запрашиваемой.
Proxy-Authenticate Данное поле заголовка должно быть включено как часть ответа 407 (Proxy Authentification Required).
Retry-After Может быть использовано вместе с ответом 503 (Service Unavailable), чтобы указать, как долго сервис будет недоступен для запросов.
Server Содержит информацию о ПО, которое используется сервером, обрабатывающем запрос.
Set-Cookie Содержит пары значений “имя/значение”, информации по этой URL. Вот возможные значения, которые мы можем настроить:
Comment=comment Для определения любого комментария, связанного с cookie.
Domain=domain Определяет домен, для которого cookie валидны.
Expires=Date-time Дата, после которого cookie не действительны. Если пусто, то истекают сразу после закрытия браузера клиентом
Path=path Определяет подмножество URL, к которым применимы cookie.
Secure Даёт указанию агенту пользователя возвращать cookie только под защищенным соединением
Vary Определяет, что сущность имеет несколько ресурсов, которые могут варьироваться в зависимости от определенного списка заголовков запроса.
WWW-Authenticate Должен быть включён в ответ 401 (Unauthorized).


32.  Из чего состоит запрос HTTP - реквест?
Протокол передачи гипертекста (HTTP) предназначен для обеспечения связи между клиентами и серверами . HTTP работает как протокол запроса-ответа между клиентом и сервером. Пример: клиент (браузер) отправляет HTTP-запрос на сервер; затем сервер возвращает ответ клиенту.
HTTP-сообщения представляют собой обычный текст, поэтому неавторизованные лица могут легко получить к ним доступ и прочитать их через Интернет. Напротив, HTTPS передает все данные в зашифрованном виде.
Формат HTTP-запроса определяется заголовком. Он содержит метод HTTP-запроса, целевой URL/URI и путь конечной точки целевого сервера.
HTTP является не защищенным, а HTTPS защищенным.
Каждое HTTP-сообщение состоит из трёх частей, которые передаются в указанном порядке:
Стартовая строка (англ. Starting line) — определяет тип сообщения;
Заголовки (англ. Headers) — характеризуют тело сообщения, параметры передачи и прочие сведения;
Тело сообщения (англ. Message Body) — непосредственно данные сообщения.
HTTP запросы - это сообщения, отправляемые клиентом, чтобы инициировать реакцию со стороны сервера. Их стартовая строка состоит из трёх элементов: Метод HTTP, глагол (например, GET , PUT или POST ) или существительное (например, HEAD или OPTIONS ), описывающие требуемое действие.
HTTP-запрос содержит четыре элемента: метод, URI, версию HTTP и адрес хоста. Метод указывает, какое действие нужно совершить. URI — это путь до конкретного файла на сайте. Версию HTTP нужно указывать, чтобы избежать ошибок, а адрес хоста помогает браузеру определить, куда отправлять HTTP-запрос.
Существует множество заголовков запроса. Их можно разделить на несколько групп:
Основные заголовки (General headers), например, Via, относящиеся к сообщению в целом
Заголовки запроса (Request headers), например, User-Agent, Accept-Type, уточняющие запрос (как, например, Accept-Language), придающие контекст (как Referer), или накладывающие ограничения на условия (like If-None).
Заголовки сущности, например Content-Length, относящиеся к телу сообщения. Как легко понять, они отсутствуют, если у запроса нет тела.


33.  Из чего состоят ответы HTTP -респонс?
HTTP-ответ является сообщением, которое сервер отправляет клиенту в ответ на его запрос. Его структура равна структуре HTTP-запроса: стартовая строка, заголовки и тело.
Стартовая строка ответа HTTP, называемая строкой статуса, содержит следующую информацию:
Версию протокола, обычно HTTP/1.1.
Код состояния (status code), показывающая, был ли запрос успешным. Примеры: 200, 404 или 302
Пояснение (status text). Краткое текстовое описание кода состояния, помогающее пользователю понять сообщение HTTP..
Пример строки статуса: HTTP/1.1 404 Not Found.


34.  Что такое и какая разница, Идентификация, Аутентификация, Авторизация?
Идентификация — процедура, в результате выполнения которой для субъекта идентификации выявляется его идентификатор, однозначно определяющий этого субъекта в информационной системе.
Аутентификация — процедура проверки подлинности, например проверка подлинности пользователя путем сравнения введённого им пароля с паролем, сохраненным в базе данных.
Авторизация — предоставление определённому лицу или группе лиц прав на выполнение определенных действий.
Идентификация, аутентификация и авторизация — это отдельные, но взаимосвязанные факторы информационной безопасности. Идентификация — это утверждение вашей личности, аутентификация проверяет это утверждение, а авторизация определяет, к каким действиям или ресурсам вы можете получить доступ после установления вашей личности. Вместе эти три элемента составляют основу безопасного и контролируемого доступа к системам и данным.


35. Что происходит при валидации на сервере?
В целом, рекомендуется использовать как клиентскую, так и серверную валидацию для максимальной безопасности и удобства использования. Клиентская валидация может обеспечить мгновенную обратную связь с пользователем, в то время как серверная валидация может гарантировать, что все данные проверены правильно.
Валидация на стороне сервера:
Происходит на сервере после отправки формы пользователем.
Использует серверный язык программирования для проверки данных: PHP, Python, Ruby или Java.
Делает процесс безопасным, так как проверка данных выполняется на сервере. Злоумышленники не могут обойти этот процесс так же легко, как клиентскую валидацию. 
Может использовать серверные фреймворки и библиотеки для определения правил валидации.
Немного замедляет обратную связь для пользователя, так как требуется время на обработку запроса и возвращение ответа сервером.


36. Что происходит при валидации на клиенте?
Валидация на стороне клиента:
Происходит в браузере до отправки формы на сервер.
Обеспечивает быструю обратную связь для пользователя. Например, так можно предупредить о том, что подтверждение пароля не совпадает.
Улучшает пользовательский опыт, предотвращая отправку некорректных данных. Например, не получится отправить на сервер форму регистрации с пустыми полями.
Не является полностью безопасной. Пользователь может отключить JavaScript в своем браузере и отправить некорректные данные или использовать программы, которые автоматически заполняют форму, игнорируя проверки на стороне клиента.


основных 3 способа валидации: 
с помощью CSS;
JavaScript;
на стороне сервера.
Способы валидации форм с помощью CSS
CSS задает внешний вид элементов на веб-странице и сам по себе не может проверять данные в форме. Тем не менее CSS удобно сочетать с HTML5-атрибутами, чтобы визуально отображать результат валидации для элементов формы.


37.  Что такое токен?
Токен — средство идентификации пользователя или отдельного сеанса работы в компьютерных сетях и приложениях.


Типы токенов авторизации
Токены авторизации различаются по типам. Рассмотрим их:
Устройства, которые необходимо подключить физически. Например: ключи, диски и тому подобные. Тот, кто когда-либо использовал USB-устройство или смарт-карту для входа в систему, сталкивался с подключенным токеном.
Устройства, которые находятся достаточно близко к серверу, чтобы установить с ним соединение, но оно не подключаются физически. Примером такого типа токенов может служить "magic ring" от компании Microsoft.
устройства, которые могут взаимодействовать с сервером на больших расстояниях.
Во всех трех случаях пользователь должен что-то сделать, чтобы запустить процесс. Например, ввести пароль или ответить на вопрос. Но даже когда эти шаги совершаются без ошибок, доступ без токена получить невозможно.


До появления токена авторизации повсеместно использовалась система паролей и серверов. Сейчас эта система всё ещё остаётся актуальной из-за своей простоты и доступности. Используемые традиционные методы гарантируют пользователям возможность получить доступ к их данным в любое время. Это не всегда эффективно. 


38.  Где хранится токен?
Хранить и получать доступ к токенам следует исключительно через безопасный механизм хранения ОС . Используйте Keychain для приложений iOS и KeyStore для приложений Android.


Приложения могут использовать выделенные API, такие как Web Storage API или IndexedDB , для хранения токенов. Приложения также могут просто хранить токены в памяти или помещать их в файлы cookie. Некоторые механизмы хранения являются постоянными, а другие стираются через определенный промежуток времени или при закрытии или обновлении страницы.


Мы рекомендуем хранить токены на сервере , так как это обеспечивает традиционным веб-приложениям максимальный уровень безопасности. Если это невозможно, следует использовать зашифрованные сеансовые куки, чтобы клиент не мог прочитать значения токенов.


Итоговый зашифрованный токен можно спокойно сохранять на устройстве и не беспокоиться о том, что его может кто-то украсть, будь-то малварь или не отягощенный моральными принципами субъект.
Еще немного рекомендаций:
Исключите токены из бэкапов.
На iOS храните токен в keychain с атрибутом kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly.
Не раскидывайте ассеты, рассмотренные в этой статье (key, pin, password и тд.) по всему приложению.
Затирайте ассеты сразу как они становятся не нужны, не держите их в памяти дольше чем необходимо.
Используйте SecureRandom в Android и SecRandomCopyBytes в iOS для генерации рандомных байт в криптографическом контексте.


39. Что такое токен авторизации? Объясни процесс токен авторизации?
Токен авторизации — это файл определенного формата, который выдает пользователю автоматизированная система или сайт на определенный период — время жизни токена. Это позволяет не вводить каждый раз логин и пароль при входе на сайт или в систему.


Токен имеет ограниченный срок жизни (1 сутки) и может быть получен с помощью кода авторизации или Refresh токена.


Процесс токен авторизации
Авторизация с помощью токена происходит следующим образом. Сначала человек запрашивает доступ к серверу или защищенному ресурсу. Запрос обычно включает в себя ввод логина и пароля. Затем сервер определяет, может ли пользователь получить доступ. После этого сервер взаимодействует с устройством: ключ, телефон, USB или что-то ещё. После проверки сервер выдает токен и отправляет пользователю. Токен находится в браузере, пока работа продолжается. Если пользователь попытается посетить другую часть сервера, токен опять связывается с ним. Доступ предоставляется или, наоборот, запрещается на основе выданного токена.
Администраторы устанавливают ограничения на токены. Можно разрешить одноразовый токен, который немедленно уничтожается, когда человек выходит из системы. Иногда устанавливается маркер на самоуничтожение в конце определенного периода времени.


40. Может ли быть авторизация без аутентификации? Приведи пример.
Аутентификация и авторизация основаны на идентификации. Поскольку вы не можете авторизовать пользователя или службу, не идентифицировав их, аутентификация всегда предшествует авторизации


Пользователь не может получить доступ к сетевым каталогам, файлам или другим ресурсам. Авторизация ничего не делает без аутентификации . Система авторизации должна знать, кто пользователь, прежде чем она сможет предоставить разрешения на доступ.


Практическое применение
Приедем примеры систем, где аутентификация и авторизация играют ключевую роль:
Банковские системы: при доступе к онлайн-банкингу или мобильным банковским приложениям, пользователи сначала аутентифицируют себя, вводя логин и пароль. После успешной проверки система определяет, какие операции (авторизации) пользователь может выполнять, такие, как перевод средств, оплата счетов или просмотр баланса.
Социальные сети: когда вы входите в свой аккаунт в социальной сети, вы проходите аутентификацию, обычно вводя логин и пароль. Затем система определяет, какие профили и сообщения вы можете видеть или редактировать, а также какую информацию вы можете публиковать.
Электронная почта: при входе в почтовый ящик вы проходите аутентификацию. Затем, на основе авторизации, система позволяет вам читать, писать, удалять и отправлять сообщения.
Онлайн-магазины: когда вы оформляете заказ в интернет-магазине, система аутентифицирует вас и затем авторизует определенные действия, такие как добавление товаров в корзину, оплата и управление заказами.
Медицинские информационные системы: врачи могут аутентифицировать себя, чтобы получить доступ к медицинской истории пациентов, при этом авторизация определяет, какие данные они могут видеть и изменять.
Почему это важно в повседневной жизни? Обе системы обеспечивают безопасность личных данных, поддерживают конфиденциальность частной информации, позволяют системам контролировать доступ и обеспечивают удобство и эффективность в использовании различных сервисов и систем.


FAQ
Что такое аутентификация?
Аутентификация — это процесс проверки идентичности пользователя. В обычной ситуации это происходит при вводе имени пользователя и пароля.
Что такое авторизация?
Авторизация определяет, какие ресурсы или действия доступны идентифицированному пользователю.
В чем ключевая разница между аутентификацией и авторизацией?
Аутентификация подтверждает, кто вы есть, а авторизация определяет, что вы можете делать.
Можно ли провести авторизацию без аутентификации?
Обычно нет. Прежде чем предоставить доступ к каким-либо ресурсам, система должна удостовериться в вашей идентичности через процесс аутентификации.
Какие технологии обычно используются для аутентификации?
Среди популярных методов аутентификации: пароли, одноразовые коды, двухфакторная аутентификация, биометрическая идентификация и др.


41. Что такое куки?
Файлы cookie – это небольшие фрагменты текста, передаваемые в браузер с сайта, который вы открываете. С их помощью сайт запоминает информацию о ваших посещениях.


Cookie («куки», от англ. «печенье») — это небольшой текстовый файл, который сервер сохраняет через браузер на пользовательском компьютере или мобильном устройстве при посещении сайта. Он предназначен для идентификации пользователя и сбора информации о его действиях на сайте.


Главное о cookie в шести абзацах
Сookies (куки) — это небольшие текстовые файлы, которые сайт сохраняет на компьютере пользователя с помощью браузера. В этих файлах записана информация о посещении сайта.
Файлы cookie хранятся на жестком диске компьютера. Интерфейс браузера позволяет управлять этими файлами, поэтому точный путь к ним знать не обязательно.
Cookie-файлы бывают временные, постоянные и сторонние. Временные удаляются после закрытия браузера, постоянные обычно хранятся год, а сторонние принадлежат не сайту, а кому-то другому.
Cookie не переносят вирусы и не влияют на количество рекламы. Однако злоумышленники могут перехватить файлы cookie и воспользоваться информацией, которая в них хранится.
Чтобы себя обезопасить, нужно соблюдать ряд правил. Например, не посещать подозрительные сайты, пользоваться только официальным программным обеспечением, своевременно обновлять браузер.
Очистить cookie нужно, если сайт работает некорректно или жёсткий диск переполнен. Сделать это можно с помощью специального ПО или в настройках браузера.


42. Что такое теплый клиент?
Тёплый клиент — это пользователь, который уже взаимодействовал с веб-сайтом или веб-приложением и для которого сохранены определенные данные, такие как куки, кэш и данные авторизации. Эти данные сохраняются в браузере или на устройстве и обеспечивают несколько важных преимуществ:
1.Быстрая загрузка страницы
2.Персонализация
3.Упрощение аутентификации
4.Повышение удобства работ


43. Что такое холодный клиент?
Холодный клиент — это пользователь, который заходит на сайт впервые или недавно очистил кэш и куки. Для сайта такой клиент — "чистый лист", и работа с ним требует больше ресурсов:


1.Длительная загрузка страниц
2.Отсутствие персонализации
3.Необходимость аутентификаци
4.Неоптимизированный опыт




44. Что такое кеш?
Cookie, кэш и автозаполнение — это разные технологии. Нужно их различать.
Кэш — это копии тяжёлых данных сайта, которые сохраняет браузер. Это могут быть изображения, видео, музыка. При повторном посещении сайта браузер не будет запрашивать эти данные из интернета, а возьмет их из кэша. Сайт загрузится быстрее.
Автозаполнение — функция браузера. Он запоминает данные, когда вы заполняете формы на сайте — например, указываете имя, номер телефона и почту. И, если вам нужно  заполнить похожие формы на другом сайте, предлагает готовые варианты.


45. Для чего используется кэширование страниц?
Кеширование является важным аспектом в процессе разработки и тестирования программного обеспечения. Оно позволяет ускорить загрузку страниц и снизить нагрузку на сервер.
Кэширование — это процесс хранения копий файлов во временном хранилище, чтобы сократить время доступа к ним. Таким образом, кэш — это любое место временного хранения копий файлов или данных.
Этот термин часто используется в связи с интернет-технологиями. Веб-браузеры кэшируют HTML-файлы, JavaScript и изображения для ускорения загрузки сайтов, DNS-серверы кэшируют DNS-записи для ускорения поиска, а CDN-серверы кэшируют контент для уменьшения задержки.
Браузеры кэшируют содержимое при первом посещении сайта, чтобы увеличить скорость его загрузки в следующий раз. Это обеспечивает более быстрое и плавное использование сайта конечным пользователем.
Можно подумать, что с появлением высокоскоростного интернета необходимость в кэше браузера отпала. Однако сайты изменяются слишком часто и эти преобразования должны происходить незаметно для конечного пользователя. В такой ситуации использование кэша становится очень важным.


46. Для чего необходимо сбрасывать кэш и куки?
Сookies (куки) – определенное количество информации, создающееся сервером после того, как пользователь посетил страницу, и которое остается на ПК пользователя как отдельный текстовый документ.
Зачем очищать кэш
Сайты часто меняются, и многие изменения отражаются в кэше. Поэтому иногда возникают различия между версией сайта, кэшированной (сохраненной) на устройстве, и версией, загружаемой с сервера.
Этот конфликт может приводить к сбоям, а очистка кэша может помочь справиться с этой ситуацией.


Кэш и файлы cookie
И кэш, и файлы cookie представляют собой информацию, хранящуюся в браузере, но они служат для разных целей.
В кэше хранятся файлы, загружаемые непосредственно с посещаемых сайтов, — шрифты, изображения и т. д. Они не зависят от профиля пользователя: у всех пользователей хранятся одни и те же файлы.
Файлы cookie хранят информацию о конкретном пользователе и о том, что он делал в интернете. Например, если вы просматриваете интернет-магазин и добавляете товары в список покупок или корзину, эта информация сохраняется в виде cookie.
Очистка кэша не приводит к очистке файлов cookie, и наоборот.


47. Что такое сессия?
Сессия - это непрерывный промежуток времени, во время которого выполняются тесты.
Сессии — способ сохранения информации о пользователе между отдельными запросами.
В широком смысле слова — это все запросы, сделанные пользователем в конкретный период времени. В узком смысле «сессия» в веб-аналитике — это серия запросов или переходов с согласованной потребностью пользователя.
сессия — в информационных технологиях — период работы учётной записи пользователя между авторизацией и её завершением.


Сессии и cookies предназначены для хранения сведений о пользователях при переходах между несколькими страницами. При использовании сессий данные сохраняются во временных файлах на сервере. Файлы с cookies хранятся на компьютере пользователя, и по запросу отсылаются браузером серверу.


Сессия тестирования (Test Session)
Непрерывный промежуток времени, во время которого выполняются тесты. В исследовательском тестировании каждая сессия тестирования основывается на концепции тестирования, но тестировщики также могут исследовать новые возможности или проблемы во время сессии. Тестировщик создает и использует тестовый сценарий на лету и записывает динамику.


48. Какие стораджи браузера ты знаешь?
Существуют два основных типа веб-хранилища: локальное хранилище (localStorage) и сессионное хранилище (sessionStorage), ведущие себя аналогично постоянным и сессионным кукам соответственно.


49. В чем разница между сешин сторедж и локал сторедж?
Свойство localStorage позволяет получить доступ к Storage объекту. localStorage аналогично свойству sessionStorage. Разница только в том, что свойство sessionStorage хранит данные в течение сеанса (до закрытия браузера), в отличие от данных, находящихся в свойстве localStorage, которые не имеют ограничений по времени хранения и могут быть удалены только с помощью JavaScript.
Следует отметить, что данные, сохранённые как в localStorage, так и в sessionStorage, являться специфичными для протокола страницы.
Ключи и значения всегда строки (так же, как и объекты, целочисленные ключи автоматически будут преобразованы в строки).


50. Для чего необходимо сбрасывать кэш и куки?
уже есть


51. Что такое REST 
Representational State Transfer (REST) в переводе — это передача состояния представления. Технология позволяет получать и модифицировать данные и состояния удаленных приложений, передавая HTTP-вызовы через интернет или любую другую сеть.


52. Что такое SOAP
SOAP — это не стиль, а протокол. Аббревиатура SOAP так и расшифровывается: Simple Object Access Protocol — простой протокол доступа к объектам. То есть правила передачи информации в SOAP строго стандартизированы, есть спецификация, которой нужно соответствовать.


53. Чем REST отличается от SOAP?
Оба приложения обмениваются данными с помощью API, определяющего правила связи. SOAP и REST – это два разных подхода к разработке API. Подход SOAP отличается высокой степенью структурированности и использует формат данных XML. REST более гибкий и позволяет приложениям обмениваться данными в нескольких форматах.


54. JSON Schema - это?
JSON Schema — это распространенный стандарт описания структуры данных.
JSON Schema позволяет добавить необходимые метаданные, или «правила» для этой информации, и описать, какие поля должны быть заполнены и что они могут содержать. JSON Schema используется для валидации данных при обмене информацией между разными системами или при работе с данными, получаемыми от пользователей.


55. Что такое JSON и XML?
JSON – это текстовый формат обмена данными, основанный на языке JavaScript. XML – это расширяемый язык разметки.
По сути два этих формата используются для передачи и хранения информации. Разница в том, что json можно преобразовать в объект JavaScript и обратно. А вот с xml так не получится, потому что он используется в основном для кодирования файлов в читаемом формате.
Обозначение объектов JavaScript (JSON - JavaScript Object Notation) - стандартный текстовый формат для представления структурированных данных на основе синтаксиса объекта JavaScript.
Расширяемый язык разметки (XML) – это язык разметки, который предоставляет правила для определения любых данных. В отличие от других языков программирования, XML не может выполнять вычислительные операции сам по себе.


56. Каким форматом данных могут быть ключи в JSON?
Ключи — строковые переменные, а значения могут быть строками, числами, булевыми значениями, объектами, массивами или null.
Json-объект — это неупорядоченное множество пар «ключ:значение», заключенное в фигурные скобки «{ }». Ключ описывается строкой, между ним и значением стоит символ «:». Пары ключ-значение отделяются друг от друга запятыми.
В JSON значение может быть одним из шести типов данных:
строка;
число;
логический;
null;
объект;
массив.
Две основные части, составляющие JSON, — это ключи и значения. Вместе они образуют пару ключ/значение. Ключ: Ключ всегда представляет собой строку, заключенную в кавычки . Значение: Значение может быть строкой, числом, логическим выражением, массивом или объектом.


57. Каким форматом данных могут быть значения в JSON?
есть в вверху


58. Какие невалидные типы данных есть у JSON?
Значения JSON не могут быть следующих типов: функция дата undefined.
Функции и даты в обычном JSON не поддерживаются.


59. Что такое WSDL
Язык описания Web-служб (WSDL) представляет собой стандартную спецификацию описания служб с поддержкой XML. Он предоставляет поставщикам служб простой способ описания базового формата запросов, передаваемых их системам, независимо от применяемой реализации.
Язык описания Web-служб (WSDL) представляет собой стандартную спецификацию описания служб с поддержкой XML. Он предоставляет поставщикам служб простой способ описания базового формата запросов, передаваемых их системам, независимо от применяемой реализации.


60.   Что такое WADL
Web Application Description Language (WADL) — машинно-читаемое XML-описание для web-приложений HTTP (как правило, веб-сервисы REST). Аналог WSDL для SOAP. WADL моделирует ресурсы, предоставляемые сервисом, и взаимосвязи между ними.
WADL используется для описания веб-сервисов RESTful, тогда как WSDL используется для описания веб-сервисов SOAP . WADL проще и легче, чем WSDL, что упрощает его понимание и использование.


61.  Что такое логи?
Лог (log) — это текстовый файл, куда автоматически записывается важная информация о работе системы или программы. Чаще всего говорят о логах сервера. Их записывает программное обеспечение, которое управляет внутренней частью сайта или онлайн-системы. Лог-файл — своеобразный журнал событий.


62.  Что такое логирование?
Логирование — это процесс формирования логов, а именно: фиксация и структурирование информации о работе системы в отдельные лог-файлы с возможностью быстрого доступа к ним в случае необходимости.


63.  Перечислите типы логов
Типы логов
Поэтому логи делятся на: 
системные, серверные, почтовые, логи аутентификации, авторизации, log file приложений, баз данных и т. д. Подобная группировка помогает быстрее находить нужный лог и оптимизировать работу с ним.
Какими бывают логи
основной рассказывает о главных событиях, которые произошли непосредственно с серверным ПО;
журнал доступа содержит сведения о посетителях сайта;
лог ошибок сообщает обо всех сбоях, которые произошли во время работы ПО;
лог веб-сервера рассказывает об обращениях к серверу и о возможных ошибках;


64.  Механизм записи информации в логи
Механизмы записи информации
Например, при обращении пользователя к конкретной странице сайта, в лог записываются: URL, к которому обращается посетитель, его IP-адрес, используемый браузер, операционная система, дата и точное время обращения, код ответа сервера и прочее.


65.  Зачем нужны логи? Какие инструменты знаете для сбора логов?
В логи записываются сведения об ошибках, действиях пользователей и других событиях, которые происходят на сервере или в системе. Разработчики и инженеры пользуются ими при отладке или при проверке, как работает программное обеспечение.
Сбор, хранение и анализ логов вручную хороши, когда у вас один сервер. Когда серверный парк разрастается, а приложений и сервисов становится больше десяти, работу с логами целесообразно автоматизировать и использовать специальные системы логирования, например, Graylog, ELK, Loggy или Splunk.
При этом Kibana, в отличие от Grafana, умеет анализировать текстовые сообщения логов. По этой причине Kibana подойдет больше, если перед пользователем стоит задача изучить системную информацию и установить с её помощью причину неисправности. Кроме того, Kibana выигрывает у Grafana в вопросах масштабируемости.


66.  Привести примеры, когда QA-специалисту необходимо собрать логи с помощью Kibana
Компонент Kibana (Кибана) — это web-панель для работы с логами, расширяемый пользовательский интерфейс. Он позволяет визуализировать проиндексированные данные в системе Elasticsearch в виде графиков и диаграмм.
Чтобы просмотреть эти логи, в Kibana необходимо настроить templates. Перейдите в Kibana, в левом меню нажмите шестеренку, выберите Kibana > Index Patterns и нажмите Create Index Pattern.
Просмотр и запрос журналов с помощью пользовательского интерфейса журналов
В развертывании, где хранятся ваши журналы, откройте Kibana. Перейдите в пользовательский интерфейс журналов в разделе Observability. В разделе Logs → Settings у вас есть два варианта конфигурации источника: использовать индексы журналов с шаблонами индексов для сопоставления индексов, содержащих данные журналов.


67.  Что такое DNS?
DNS — это Domain Name System, система доменных имен. Это система, которая связывает между собой доменное имя сайта, то есть его название, и IP-адрес — он нужен для «общения» компьютеров по сети. Благодаря DNS-серверу вам не нужно знать IP-адрес сайта, чтобы попасть на него.
Как работают DNS-серверы:
Пользователь вводит запрос в строке браузера. Тот в свою очередь перенаправляет его DNS-серверу, который ищет совпадения между доменным именем и IP. При обнаружении совпадений браузер делает запрос по IP-адресу сервера и получает в ответ нужную информацию, после чего браузер отображает ее.
DNS (Domain Name System) — это система, которая преобразует удобочитаемые доменные имена в числовые IP-адреса, используемые компьютерами для идентификации друг друга в сети Интернет. Когда вы вводите веб-адрес (URL) в свой браузер, он отправляет запрос на сервер DNS для получения соответствующего IP-адреса.


68.  Что такое IP адрес?
Адрес интернет-протокола (IP-адрес) — это уникальный цифровой идентификатор для каждого устройства или сети, которые подключаются к Интернету или к локальной компьютерной сети. Обычно назначаемый интернет-провайдером (ISP) IP-адрес — это адрес онлайн-устройства, используемый для связи через Интернет.


69.  Что такое порт?
Компьютерный сетевой порт – это число, которое идентифицирует назначение сетевых потоков данных в пределах одного компьютера. Все хосты (компьютеры) обмениваются друг с другом информацией при помощи уникальных цифровых IP-адресов, представленных двоичной системой.


70.  Что такое хост?
В переводе с английского слово “host” означает “хозяин, принимающий гостей”. Программисты под этим понятием подразумевают сервер, на котором располагается сайт и вся хранящаяся на нем информация (данные, файлы, картинки, резервные копии и т. п.).
Хост – это любое устройство, которое имеет подключение к локальной сети или к всемирной сети Интернет и при этом является составной частью этой сети. Устройство может быть как физическим (например, компьютер, ноутбук, мобильный телефон, планшет, маршрутизатор), так и виртуальным.


71.  Что такое URL
URL (Uniform Resource Locator — унифицированный указатель ресурса) — это то, что отображается в строке браузера, когда вы заходите на тот или иной сайт. URL-адрес есть не только у сайтов, но и у различных файлов (документов, изображений, видео и так далее), загруженных в Интернет.
URL сайта выглядит так: https://www.reg.ru. где http:// — это протокол передачи данных. Как правило используется http://, однако, в последнее время набирает популярность https://. Это безопасный протокол передачи данных, он защищен.


72.  В чем разница между URI, URL, URN?
URL — это URI, который, помимо идентификации ресурса, предоставляет еще и информацию о местонахождении этого ресурса. А URN — это URI, который только идентифицирует ресурс в определённом пространстве имён (и, соответственно, в определённом контексте), но не указывает его местонахождение.
Оно включает URL, который говорит, где что лежит, и URN, который как постоянный паспорт, не меняющийся со временем. URI решает проблему организации и идентификации различных ресурсов, будь то страницы веб-сайта, документы или мультимедийные файлы.
если мы говорим про сеть Интернет, то чаще всего используем термин URL, так как находим определенный ресурс в сети именно по его адресу на каком-то сервере. Также часто можно встретить аббревиатуру URI, подразумевающую именно URL. Хотя по факту это не совсем так, потому что URL является часть URI. В то же время в контексте веба URN практически не используется.


73.  Из чего состоит url адрес?
URL обычно содержит несколько компонентов: протокол, доменное имя, путь к ресурсу и необязательные параметры.
Составные части URL
Протокол (HTTP, HTTPS, FTP и telnet).
Имя домена веб сайта – адрес сайта в WWW.
Подкаталог файла.
Имя файла запрашиваемого ресурса.
Параметры (опционально).


74.  Что происходит после ввода запроса в адресную строку?
После отправки запроса и заголовков, браузер отправляет серверу единичную пустую строку, сигнализируя о том, что содержимое сообщения закончилось. После этого посылается пустая строка, а затем оставшийся контент HTML-страницы www.google.com.
Сервер отправляет ответ браузеру
Когда ответ сформирован, он отправляется веб-сервером обратно браузеру. В ответе как правило содержится контент для отображения веб-страницы, информация о типе сжатия данных, способах кэширования, файлы cookie, которые нужно записать и так далее.


75.  Что такое HTTP?
HTTP — это протокол, для получения различных ресурсов, например, HTML-документов. Он лежит в основе обмена данными в Интернете. HTTP является протоколом клиент-серверного взаимодействия, что означает инициирование запросов к серверу самим получателем, обычно веб-браузером.


76.  Что такое HTTPS?
Как следует из названия, защищенный протокол передачи гипертекста (HTTPS) является более безопасной версией или расширением HTTP. При использовании HTTPS браузер и сервер устанавливают безопасное зашифрованное соединение перед передачей данных.


77.  SSL и TLS - это?
И SSL, и TLS – это протоколы передачи данных, которые шифруют данные между серверами, приложениями, пользователями и системами. Они аутентифицируют обе стороны, соединенные по сети, чтобы те могли безопасно обмениваться данными.
TLDR: SSL/TLS шифрует коммуникации между клиентом и сервером, в первую очередь веб-браузерами и веб-сайтами/приложениями . Шифрование SSL (Secure Sockets Layer) и его более современная и безопасная замена, шифрование TLS (Transport Layer Security), защищают данные, отправляемые через Интернет или компьютерную сеть.


78.  TCP/IP - это?
TCP/IP - это набор протоколов, который задает стандарты связи между компьютерами и содержит подробные соглашения о маршрутизации и межсетевом взаимодействии.
TCP/IP — это названия протоколов, которые лежат в основе интернета. Благодаря им компьютеры обмениваются данными, не мешая друг другу. Оба протокола отвечают за передачу данных, но IP просто отправляет их в сеть, а TCP ещё следит за тем, чтобы эти данные попали по нужному адресу.
IP получает и определяет IP-адрес приложения или устройства, куда должны быть отправлены данные. TCP отвечает за транспортировку и маршрутизацию данных через сетевую архитектуру и обеспечение их доставки целевому приложению или устройству, определенному IP.
HTTP является протоколом прикладного уровня, который чаще всего использует возможности другого протокола - TCP (или TLS - защищённый TCP) - для пересылки своих сообщений, однако любой другой надежный транспортный протокол теоретически может быть использован для доставки таких сообщений.


79.  Уровни TCP/IP?
межсетевой уровень — помогает отдельным сетям общаться друг с другом; транспортный уровень — отвечает за передачу данных между устройствами, например, по протоколам TCP и UDP; прикладной уровень — помогает приложениям общаться друг с другом с помощью интерфейсов или API.
Эти стандарты описывают четыре уровня абстракции модели TCP/IP: 
прикладной, 
Первый уровень из всех — это уровень канала передачи данных , и именно здесь располагаются все физические части, которые являются частью передачи информации и подключения к сети. То есть, беспроводная сеть, кабель Ethernet, контроллер, сетевая интерфейсная карта...
Уровень приложений. Уровень приложений определяет стандартные интернет-сервисы и сетевые приложения, которые может использовать каждый . Эти сервисы работают с транспортным уровнем для отправки и получения данных.
транспортный, 
Транспортный уровень — это уровень 4 модели взаимодействия открытых систем (OSI) . Он отвечает за обеспечение точной и надежной доставки пакетов данных между отправителем и получателем. Транспортный уровень чаще всего использует TCP или протокол пользовательских датаграмм (UDP).
межсетевой
Internet Protocol (IP, досл. «межсетевой протокол») — маршрутизируемый протокол сетевого уровня стека TCP/IP. Именно IP стал тем протоколом, который объединил отдельные компьютерные сети во всемирную сеть Интернет. Неотъемлемой частью протокола является адресация сети
и канальный.
Канальный уровень - Канальный уровень является самым низким уровнем в модели TCP/IP. Он сравнивается с комбинацией канального уровня и физического уровня модели OSI. Они похожи, но не идентичны. Этот уровень представляет собой группу протоколов связи, которая действует как связь, к которой хост подключен физически.


80.  Уровни OSI?
Модель взаимодействия открытых систем OSI (Open Systems Interconnection) — концептуальная модель, которая выстраивает логическую схему взаимодействия между компьютерными системами, которые могут беспрепятственно взаимодействовать с другими подобными системами.
Модель не смогла дать полное описание сети и не получила поддержку архитекторов на заре Интернета, который впоследствии нашел отражение в менее предписывающем TCP/IP, в основном под руководством Инженерного совета Интернета (IETF).
Разница между OSI и TCP/IP
OSI предоставляет детализированное описание сетевых функций и модульность, в то время как TCP/IP предлагает простоту и практичность. Выбор между этими моделями зависит от конкретных требований и условий применения.


81.  Что такое FTP?
FTP (File Transfer Protocol) – это протокол, который предназначен для передачи файлов через Интернет или локальную компьютерную сеть. Это один из самых старых протоколов передачи файлов, который появился еще в 1971 году.
FTP или File Transfer Protocol — это один из базовых протоколов передачи файлов, предназначенный для передачи файлов в сети между компьютерами. С его помощью можно подключаться к FTP-серверам, просматривать содержимое их каталогов и загружать файлы с сервера или на сервер.
FTP-адреса обычно имеют формат ftp://hostname, где hostname — доменное имя или IP-адрес, например mysite.ru или 127.0.0.1. В данной статье мы рассмотрим основы работы протокола FTP и порекомендуем программы для подключения.


82.  Какую структуру имеет веб-страница?
Структура веб-сайта — это способ организации и взаимосвязи содержимого и страниц веб-сайта . Она включает в себя иерархическое расположение веб-страниц и их взаимосвязь друг с другом. Структура веб-сайта помогает посетителям и поисковым системам ориентироваться и понимать содержимое веб-сайта.
Структура сайта – это логическое построение всех страниц и разделов ресурса. Благодаря ей пользователь понимает, где располагаются основные разделы сайта, как перемещаться между страницами или вернуться на главную. Визуально структуру можно представить в виде схемы.
Два основных структурных компонента в HTML — это тело и голова . Оба они используются всеми веб-браузерами для отображения структуры и настроек веб-страницы.


83. Что такое HTML/CSS/JavaScript?
HTML, CSS и JavaScript работают вместе, чтобы создать динамичные и красивые веб-страницы. HTML определяет структуру и содержимое страницы, CSS задает стили и оформление, а JavaScript добавляет интерактивность и дополнительные функции.


84. Что такое AJAX?
AJAX (аббревиатура от «Asynchronous Javascript And Xml») – технология обращения к серверу без перезагрузки страницы. За счёт этого уменьшается время отклика и веб-приложение по интерактивности больше напоминает десктоп.
Асинхронная обработка означает, что AJAX позволяет вашему веб-приложению одновременно получать и отправлять данные с вашего веб-сервера . Ваши клиенты могут давать несколько команд, не дожидаясь, пока сервер выполнит начальную команду. Проверка данных в реальном времени с помощью AJAX возможна благодаря его функции асинхронной обработки.


85. Что такое адаптивная и респонсивная верстка?
Адаптивная верстка подразумевает изменения размера, положения, видимости элементов в зависимости от размеров экрана пользователя и других параметров (через css media queries). В резиновой верстке обычно просто тянется основной элемент с содержанием.
Адаптивная верстка сайта — это формирование структуры документа на базе HTML-разметки, предусматривающей автоматическое изменение страницы в зависимости от размера экрана пользователя. Простыми словами это макет страницы, автоматически подстраивающийся под размер экрана пользователя.
Респонсивная верстка или Резиновая вёрстка — это когда вы задаете всему макету и отдельным его частям не фиксированную ширину, а эластичную — в процентах. За исключением минимальной и максимальной ширины.


86. Как протестировать адаптивную верстку?
Наиболее удобный способ вручную протестировать адаптивность сайта – открыть его в браузере Google Chrome, вызвать панель инструментов веб мастера (нажатием f12) и включить режим эмуляции тачскрин-экранов.
У браузера Google Chrome есть мощный набор инструментов — DevTools. С его помощью можно проверить адаптивность сайта. Для этого нужно открыть нужный ресурс, выбрать в меню «Дополнительные инструменты → Инструменты разработчика» и нажать на кнопку «Toggle device toolbar» в левом верхнем углу.


87. Как выполнить Debug страницы в браузере?
Запуск отладчика
Нажмите клавишу F5 (Отладка > Начать отладку) или кнопку Начать отладку на панели инструментов отладки. При нажатии клавиши F5 происходит запуск приложения с присоединенным отладчиком. ...
Остановите отладчик, нажав красную кнопку остановки (SHIFT + F5).
В окне консоли нажмите клавишу, чтобы закрыть его.
Для отладки нужно запустить приложение с отладчиком, подключенным к процессу приложения. Для этого: Нажмите клавишу F5 (Отладка > Начать отладку), которая является наиболее распространенным методом.
Шаг 1. Выбор инструмента отладки
Visual Studio Debugger (для . NET, C++, Python и других языков)
Chrome DevTools (для веб-разработки)
Xcode Debugger (для разработки на iOS и macOS)
Android Studio Debugger (для разработки на Android)
Самый популярный инструмент для отладки кода в браузере - Chrome DevTools.
Откровенно говоря, отладка кода может занимать много времени. Особенно, если использовать такие простые команды как console.log() или alert().
И на этом моменте в игру вступает Chrome DevTools, позволяя нам дебажить код без утомительных команд. С помощью этого инструмента можно легко редактировать CSS и HTML "на лету", тестировать сеть, проверять скорость сайта и даже эмулировать экран мобильных устройств для тестирования адаптивности верстки проекта.
Для запуска отладчика (на примере браузера Chrome) необходимо нажать клавишу F12, или выбрать интересующий элемент на страницы, щелкнуть по нему правой кнопкой мыши и выбрать - Inspect.


88. Что такое WebSocket и как проверить обрыв соединения?
WebSocket — протокол связи поверх TCP-соединения, предназначенный для обмена сообщениями между браузером и веб-сервером, используя постоянное соединение.
WebSocket (веб-сокеты) — независимый веб-протокол, который позволяет создавать интерактивное соединение между сервером и клиентом (браузером) и обмениваться сообщениями в реальном времени. В отличие от HTTP, веб-сокеты позволяют работать с двунаправленным потоком данных, поэтому технология является уникальной.


89. Как узнать схему API проекта?
Схема предоставляет подробную информацию о свойствах ресурса. Схема представлена ​​словарем, где ключи — это имена свойств ресурса, а значения — это объекты, описывающие соответствующее свойство .
Есть программы типа HTTP Analyzer, такой программой можно посмотреть запросы.
Выполняете определенные операции на сайте, допустим фильтр по цене, ловите запрос анализатором,
смотрите какой запрос пошел к апи, и уже пытаетесь путем логических рассуждений и подбора, составить правильный запрос к апи.
спрашиваете у админа сайта, есть ли инструкция по апи.
Это же кастомная вещь, которую каждый может сделать как угодно
Fidler и Postman вам в ленту. Делают , что Андрей рассказал выше.
Обсуждая API, вы можете услышать разговоры о «мыле» (SOAP) и «отдыхе» (REST) и задаться вопросом, работают ли разработчики программного обеспечения или планируют отпуск. На самом деле это названия двух наиболее распространенных архитектур для веб-API:
SOAP (изначально бывший сокращением, Simple Object Access Protocol) — это схема взаимодействия на основе XML, которая имеет стандартизованные структуры для запросов и ответов.
REST, что означает «передача репрезентативного состояния» (Representational State Transfer), представляет собой более открытый подход, предусматривающий множество соглашений, но оставляющий многие решения на усмотрение человека, разрабатывающего API.
На протяжении этого курса вы, возможно, заметили, что у нас есть склонность к REST API. Это предпочтение во многом связано с невероятной скоростью принятия REST. Это не означает, что SOAP — зло; у него есть свои сильные стороны. Однако в центре нашего обсуждения останется REST, так как это, скорее всего, именно тот API, с которым вы столкнетесь. В остальных разделах мы рассмотрим компоненты, составляющие REST API.


90. Можно ли начать тестирование, если интерфейс (frontend) ещё не готов? Как?
Следует начинать тестирование на ранних стадиях жизненного цикла разработки ПО, чтобы найти дефекты как можно раньше.
Тестирование начинается ещё на этапе проектирования работы и продолжается даже после выпуска продукта.
Раннее начало тестирования сокращает затраты и время на доработку и создание безошибочного программного обеспечения, которое поставляется клиенту. Однако в жизненном цикле разработки программного обеспечения (SDLC) тестирование можно начать с этапа сбора требований и продолжить до развертывания программного обеспечения.
Тестировщик подключается на каждом этапе для того, чтобы: дать свою оценку, протестировать требования; зафиксировать важные моменты по проекту (чек-листы, тест-кейсы); выявить особые сценарии использования или user-stories, затрагивающие доступность, тестируемость, граничные случаи.
Тестировщики фронтенда проверяют, соответствует ли графический интерфейс приложения требованиям. Кроме того, они должны оценить каждый элемент, например, кнопки, ярлыки, поля ввода и т. д.
Тестирование фронтенд части web-приложений как для десктопных версий, так и для мобильных браузеров включает в себя привычные проверки HTML, CSS и JavaScript.
Основными типами тестирования для фронтенда являются модульное тестирование, интеграционное тестирование и сквозное (E2E) тестирование. Модульная тестовая работа одного модуля (функции, объект, класс, модуль) изолированно от других частей приложения. Интеграционные тесты проверяют несколько модулей. Чаще всего для фронтенда это проверка производительности частей приложения, границ с границами мира (работа с localStorage или cookie, работа с API), либо имитация событий на странице и переходов между модулями. При сквозном тестировании загружается все приложение и имитируется работа пользователя с приложением.
Разработка через тестирование (TDD) — это практика разработки программного обеспечения, которая делает акцент на написании тестов перед написанием фактического кода . Она следует циклическому процессу написания провального теста, написания минимального кода для прохождения теста и последующего рефакторинга кода.


91. Какие виды тестирования можно применить только к Web?
Специалисты по тестированию веб-сайтов используют такие методы тестирования, как:
Функциональное тестирование.
Тестирование производительности.
Юзабилити-тестирование.
Тестирование пользовательского интерфейса.
Тестирование безопасности.
Мобильное тестирование.
Регрессионное тестирование.


92. Каковы есть основные виды уязвимости веб-приложений?
В последней редакции OWASP Top Ten названы следующие уязвимости:
нарушение контроля доступа;
недочеты криптографии;
инъекции;
небезопасный дизайн;
небезопасная конфигурация;
использование уязвимых или устаревших компонентов;
ошибки идентификации и аутентификации;
нарушения целостности программного обеспечения и данных;
ошибки логирования и мониторинга безопасности;
подделка запросов на стороне сервера.


Ниже рассмотрены самые популярные атаки на веб-приложения.
SQL-инъекции.
При атаке злоумышленник изменяет SQL-операторы для манипуляции пользовательскими данными. Злоумышленник использует код приложения для доступа или повреждения содержимого базы данных. В случае успеха злоумышленник сможет:
читать конфиденциальные данные из баз данных (имена, пароли пользователей);
создавать, изменять или удалять данные, хранящиеся в серверной базе данных;
внедрять вредоносный контент в уязвимые поля.
Межсайтовый скриптинг (XSS).
Уязвимости XSS нацелены на скрипты, выполняющиеся у клиента, а не на сервере. Злоумышленник выполняет вредоносный сценарий в веб-браузере жертвы. Фактическая атака происходит, когда жертва посещает ресурс, выполняющий вредоносный код. Как правило, используется на форумах, сайтах объявлений и веб-страницах, на которых можно оставлять комментарии.
Отказ в обслуживании (DoS).
При DoS-атаках компьютеры в целевой сети поражают поддельные пакеты информации. Злоумышленники используют неправильно настроенные сетевые устройства. Цель – помешать веб-сайту обслуживать пользователей в обычном режиме. DoS-атаки применяются из-за нехватки критических ресурсов в системе, использования уязвимостей или злоупотребления функциональностью.
Злоумышленники могут нацелиться на веб-сервер, сервер БД или аутентификации. К сожалению, атаки на прикладной уровень крайне легко осуществить.
Подделка межсайтовых запросов (CSRF).
При CSRF-атаке пользователя обманом заставляют выполнить действие. Сторонний веб-сайт отправляет запрос веб-приложению, в котором пользователь аутентифицировался (например, в их банке). После злоумышленник получает доступ к функциям через браузер жертвы. Целями становятся социальные сети, почтовые клиенты, онлайн-банкинг и веб-интерфейсы для сетевых устройств.
Другие виды угроз.
Злоумышленники также создают вредоносные пакеты и маскируют их под легитимные программы. Такие пакеты разрабатываются с целью скрыться от обнаружения некоторых систем, избежать проверки и загрузиться на устройства жертв.
Нарушение в аутентификации и управлении сеансом связаны с проблемами сохранения личности пользователя. Если учетные данные для аутентификации и идентификаторы сеанса не защищены, злоумышленник может захватить активный сеанс и присвоить себе личность пользователя.
При размещении небезопасных ссылок веб-приложение предоставляет ссылку на внутренний объект реализации. Объекты внутренней реализации включают файлы, записи базы данных, каталоги и ключи базы данных. Когда приложение предоставляет ссылку на один из объектов в URL-адресе, хакеры получают доступ к личным данным пользователя.


93. Какие инструменты для тестирования Web performance client-side знаете?
Для разработки веб-сайтов необходимы HTML, CSS и JavaScript. Чтобы создавать веб-сайты и приложения, которые люди хотят использовать, которые привлекают и удерживают пользователей, вам нужно создать ?? хороший пользовательский опыт. Частью такого пользовательского опыта является обеспечение быстрой загрузки контента и отзывчивости на взаимодействие с пользователем. Это известно как веб-performance, и в этом разделе вы сосредоточитесь на основах создания эффективных веб-сайтов.
Топ-15 бесплатных инструментов для нагрузочного тестирования и стресс-тестирования (бесплатные инструменты тестирования производительности):
Apache JMeter
Taurus
Locust
Fiddler с BlackWidow и Watcher
nGrinder
The Grinder
Gatling
k6
Tsung
Siege
Bees with Machine Guns
Fortio
Puppeteer
Flood Element
Artillery
Нагрузочное тестирование — это подвид тестирования производительности. В ходе этого тестирования симулируется одновременный вход в приложение и взаимодействие с ним большого количества пользователей. Таким образом мы выясняем, может ли система справляться с подобной нагрузкой.